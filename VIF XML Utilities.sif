<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS=""
   NAME="Siebel Repository"
   UPDATED="01/01/2000 00:00:00"
   UPDATED_BY="SADMIN"
   CREATED="01/01/2001 00:00:00"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="EAI Business Services"
	   UI_FREEZE="N"
	   UPDATED="01/01/2000 00:00:00"
	   UPDATED_BY="SADMIN"
	   CREATED="01/01/2000 00:00:00"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VIF XML Utilities"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="01/01/2000 00:00:00"
		   UPDATED_BY="YUVALY1"
		   CREATED="01/01/2000 00:00:00"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetByElementName"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ElementName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IncomingXML"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultingXML"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Navigate"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="In"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Out"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ParseBuffer"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="YUVALY1"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="YUVALY1">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Buffer"
				   OPTIONAL="N"
				   STORAGE_TYPE="Value"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="YUVALY1"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="YUVALY1">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Row, for example"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ChieldName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="true / false. If true return information for debug"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IsDebugMode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Param1: 4; Param2: 150; Param3: 2"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Template"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="XML Hierarchy"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="Function return text of XML-node. Returned first node only if found more then one. IgorV. 26.02.12. Activated"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="XPath"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Input xml"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="XML"
				   OPTIONAL="N"
				   STORAGE_TYPE="Value"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="xPath expression"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="xPath1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="xPath expression"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="xPath2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetXmlByElement"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetXmlByElement(ElementName,IncomingXml)
{
	var sXML,i;
	var xmlRecords = COMCreateObject(&quot;MSXML2.DOMDocument&quot;);
	var domXMLInput = COMCreateObject(&quot;MSXML2.DOMDocument&quot;);
	var domParent;
	
	sXML = &quot;&quot;;
	
	domXMLInput.LoadXML(IncomingXml);
	
	if(domXMLInput.getElementsByTagName(ElementName).Item(1) == null )
	{
		xmlRecords = domXMLInput.getElementsByTagName(ElementName).Item(0);
		sXML = xmlRecords.XML;
	}
	else
	{
		if(domXMLInput.getElementsByTagName(ElementName).Item(0).parentNode != null)
		{
			sXML = sXML + &quot;&lt;ListOf&quot; + ElementName + &quot;&gt;&quot;;
			for(i=0;domXMLInput.getElementsByTagName(ElementName).Item(i) != null; i++)
			{
				if( domXMLInput.getElementsByTagName(ElementName).Item(i).parentNode != null)
				{
					sXML = sXML + &quot;&lt;Single&quot; + ElementName + &quot;&gt;&quot;;
					sXML = sXML + &quot;&lt;TableName&gt;&quot; + domXMLInput.getElementsByTagName(ElementName).Item(i).parentNode.NodeName + &quot;&lt;/TableName&gt;&quot;;
					sXML = sXML + domXMLInput.getElementsByTagName(ElementName).Item(i).XML;
					sXML = sXML + &quot;&lt;Index&gt;&quot; + i+1 + &quot;&lt;/Index&gt;&quot;
					sXML = sXML + &quot;&lt;/Single&quot; + ElementName + &quot;&gt;&quot;;
				}				
			}
			sXML = sXML + &quot;&lt;/ListOf&quot; + ElementName + &quot;&gt;&quot;;
		}
	}
	
	//var xmlRecords = null;
	xmlRecords = null; // IgorV. 30.11.10 updated
	//var domXMLInput = null;
	domXMLInput = null; // IgorV. 30.11.10 updated
	
	return(sXML);
}"
			   SEQUENCE="2"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ParseBuffer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ParseBuffer(ips, ops)
{
/*
	Parsing string buffer to xml - PS
	input: 
		buffer - string buffer (123abcd)
		template - template for parsing in format 
			NameOfParameter1: LengthOfParameter1;NameOfParameter2: LengthOfParameter2
			(Number:3;string:4)
		rowName - name of PS, it pesentation row (OneRow)
		Name - name of output PS (Table).
		IsDebugMode - if true - debug info will be added in output PS
	output:
		ps, with name from input parameter Name.
	for data from example resut:
  PropertySet: Type: &apos;Table&apos; Value: &apos;&apos; PropertyCount: 0 ChildCount: 1
  CHILD
    PropertySet: Type: &apos;Row&apos; Value: &apos;&apos; PropertyCount: 1 ChildCount: 2
    RowNumber = 1
    CHILD
      PropertySet: Type: &apos;Number&apos; Value: &apos;123&apos; PropertyCount: 0 ChildCount: 0
      End PS
    CHILD
      PropertySet: Type: &apos;string&apos; Value: &apos;abcd&apos; PropertyCount: 0 ChildCount: 0
      End PS
    End PS
  End PS
  
	Xml presentation:
&lt;Table&gt;
	&lt;Row RowNumber=&quot;1&quot;&gt;
		&lt;Number&gt;123&lt;/Number&gt;
		&lt;string&gt;abcd&lt;/string&gt;
	&lt;/Row&gt;
&lt;/Table&gt;
		
*/
//	Template : Name:Symbols;
	
	var thisFunctionName = &quot;ParseBuffer&quot;; 
	var template = &quot;&quot;; // input param
	var pairs = null; // array type of val[0] - name of parameter from template, val[1] - length of substring
	var buffer = &quot;&quot;; // input param
	var tmpPs = TheApplication().NewPropertySet(); // Output ps
//	var psName = &quot;&quot;;
	var rowName = &quot;&quot;; 
	var isDebugMode = false; // if true - in ps add row number and content of row
	template = ips.GetProperty(&quot;Template&quot;);
//buffer = ips.GetProperty(&quot;Buffer&quot;);
	buffer = ips.GetValue();
	isDebugMode = ips.GetProperty(&quot;IsDebugMode&quot;) == &quot;true&quot;;
	rowName = ips.GetProperty(&quot;ChieldName&quot;);

//	WriteToLog(thisFunctionName, &quot;Buffer = &quot; + buffer + &quot;\nTemplate = &quot; + template, false) 
//	WriteToLog(thisFunctionName, &quot;Template = &quot; + template + &quot; Buffer:\n&quot; + buffer, false) 
	WriteToLog(thisFunctionName, &quot;Template = &quot; + template , false);
	pairs = template.split(/\s*;\s*/);
	for (var i = 0; i &lt; pairs.length; i++) 
	{
	    pairs[i] = pairs[i].split(/\s*:\s*/);
	    pairs[i][1] = ToInteger(pairs[i][1]); // len of value in buffer
	}
//----------------//----------------//----------------//----------------
	var startPosition = 0; // position in match
	var matches = buffer.split(&quot;\n&quot;); // array of strings
	var rowPs = TheApplication().NewPropertySet(); //parsed presentation for row from input buffer
	var valPs = TheApplication().NewPropertySet(); // presentation of value from input ps (chield of rowPs)
	var propName = &quot;&quot;;
	var propValue = &quot;&quot;;
	WriteToLog(thisFunctionName, &quot;Rows in buffer &quot; + matches.length, false) 
	for (var m = 0; m &lt; matches.length; m++)
	{
		if (matches[m] == &quot;&quot;) continue;
		rowPs.Reset();
		rowPs.SetType(rowName); //rowPs.SetValue(m + 1);
		rowPs.SetProperty(&quot;RowNumber&quot;, m + 1);
		if (isDebugMode) 
		{
			rowPs.SetProperty(&quot;Content&quot;, matches[m]);
			rowPs.SetProperty(&quot;RowNumber&quot;, m + 1);
		}
		startPosition = 0; 
		for (i = 0; i &lt; pairs.length; i++)
		{
//WriteToLog(thisFunctionName, &quot;startPosition = &quot; + startPosition, false) 
			propName = pairs[i][0];
			propValue = matches[m].substr(startPosition, pairs[i][1]);
			if (isDebugMode) 
			{
//				valPs.SetProperty(&quot;from&quot;, startPosition); 
//				valPs.SetProperty(&quot;len&quot;, pairs[i][1]);
				rowPs.SetProperty(&quot;Template&quot;, 
					rowPs.GetProperty(&quot;Template&quot;) + propName + &quot;: &quot; + startPosition + &quot;/&quot; + pairs[i][1] + &quot;; &quot;);
			}
			propValue = propValue.replace(/^\s*|\s*$/g,&quot;&quot;); //trim
			valPs.Reset();
			valPs.SetType(propName);
			valPs.SetValue(propValue);
			rowPs.AddChild(valPs.Copy());
			//startPosition += ToInteger(pairs[i][1]);
			startPosition += pairs[i][1];
		} 
		tmpPs.AddChild(rowPs.Copy());
	}
//	ops.AddChild(tmpPs.Copy());
/*	var o = TheApplication().NewPropertySet();
	o.SetType(ips.GetProperty(&quot;Name&quot;));
	o.AddChild(tmpPs);
	ops.AddChild(o);*/
//	tmpPs.SetType(ips.GetProperty(&quot;Name&quot;));
	tmpPs.SetType(&quot;XML Hierarchy&quot;);
	ops.AddChild(tmpPs);
//	TheApplication().GetService(&quot;KH Logs BS&quot;).PrintPsToLog(ops, null);
	pairs = null;
	tmpPs = null;
	matches = null;
	rowPs = null;
	valPs = null;
}"
			   SEQUENCE="3"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var iRet = ContinueOperation;
	switch(MethodName)
	{
		case &quot;GetByElementName&quot;:
		
			var sOut  = GetXmlByElement(Inputs.GetProperty(&quot;ElementName&quot;),Inputs.GetProperty(&quot;IncomingXML&quot;));
			
			Outputs.SetProperty(&quot;ResultingXML&quot;,sOut);
			
			iRet = CancelOperation;
			break;
		case &quot;Navigate&quot;:
			TheApplication().GoToView(&quot;Personal Service Request List View&quot;);
			Outputs.SetProperty(&quot;Out&quot;,&quot;LEAVING&quot;);
			iRet = CancelOperation;
			break;
		case &quot;ParseBuffer&quot;: //IgorV.
			ParseBuffer(Inputs, Outputs);
			iRet = CancelOperation;
			break;
		case &quot;XPath&quot;://IgorV. 29.01.12
//			TheApplication().GetService(&quot;KH Logs BS&quot;).PrintPsToLog(Inputs, null);
			XPath_Wrapper(Inputs, Outputs);
			iRet = CancelOperation;
			break;
	}	
	return (iRet);
}"
			   SEQUENCE="7"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="WriteToLog"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function WriteToLog(functionName, message, isError)
{
	//IgorV. 20.10.2010
	try
	{
		TheApplication().GetService(&quot;KH Logs BS&quot;).WriteLogRecord(&quot;BS&quot;, this.Name(), functionName,message, isError);
	}
	catch(e)
	{
		//nothing to do
	}
}"
			   SEQUENCE="4"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="XPath"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function XPath(xml, xPaths)
{
//TheApplication().RaiseErrorText(&quot;Function: &apos;&quot; + this.Name() + &quot;.XPath&apos; checked but not in use. For using this function remove this error message&quot;);
//IgorV. 26.02.12. Function activated
/*
	IgorV. 29.01.2012
	
	Function return text of XML-nodes. Returned first node only if found more then one.
	XML - sourse XML
	xPath - row or array of rows with xpath.
	If xPath one row - function return single row with text of node, if xPath is array - 
	return array of string
	Example:
	XPath(
		&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;doc&gt;&lt;p&gt;Hello, world!&lt;/p&gt;&lt;p v=&quot;Me&quot;&gt;Hello, my world!&lt;/p&gt;&lt;/doc&gt;&apos;,
		&quot;doc/p&quot;
		) = Hello, world!
	example for using with multiply xpath in function XPath_Wrapper
*/
	var thisFunctionName = &quot;XPath&quot;;
	var xmlDoc = null;
	var node = null;
	var res = null;
	try
	{
		//xmlDoc = COMCreateObject(&quot;Microsoft.XMLDOM&quot;);
    xmlDoc = COMCreateObject(&quot;Msxml2.DOMDocument.6.0&quot;);   // IgorV. 04.08.20. This object has better functionality
		xmlDoc.loadXML(xml);
		if (xmlDoc.parseError.errorCode != 0) // IgorV. 13.06.13
			TheApplication().RaiseErrorText(&quot;Error creation Xml object: (&quot; + xmlDoc.parseError.errorCode + &quot;) &quot; + xmlDoc.parseError.reason);
			//TheApplication().RaiseError(xmlDoc.parseError.errorCode, &quot;Error creation Xml object: &quot; , xmlDoc.parseError.reason);
		
		switch (typeof xPaths)
		{
			case &quot;string&quot;:
				res = &quot;&quot;;
				node = xmlDoc.selectSingleNode(xPaths);
				res = node != null ? node.text : &quot;&quot;;
				break;
			case &quot;function&quot;://typeof (new Array()) = &apos;function&apos;
			case &quot;object&quot;:
				res = new Array(xPaths.length);
//				WriteToLog(thisFunctionName, xml, false);
				for (var i = 0; i &lt; xPaths.length; i++)
				{
					node = xmlDoc.selectSingleNode(xPaths[i]);
					res[i] = ToString(node) == &quot;undefined&quot; || node == null  ? &quot;&quot; : node.text;
				}
				break;
			case default:
				TheApplication().RaiseErrorText(&quot;Unknown type of xPaths: &apos;&quot; + (typeof xPaths) + &quot;&apos;&quot;);
				break;
		}
		return res;
	}
	catch(e)
	{
		WriteToLog(thisFunctionName, e.message, true);
		throw e;
	}
	finally
	{
		xmlDoc = node = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="XPath_Wrapper"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function XPath_Wrapper(Ips, Ops)
{
/*
	IgorV. 29.01.12
	Function return text from XML node, it geted by XPath expression.
	Function referended for first node if founded more from one node. It mean (see example),
	by xpath doc/p found 2 nodes, but returned first node only.
	Ips.Value (property XML) - source xml document.
	Other properties xpath expressions.
	Example:
	Input PS
		XML = &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;doc&gt;&lt;p&gt;Hello, world!&lt;/p&gt;&lt;p v=&quot;Me&quot;&gt;Hello, my world!&lt;/p&gt;&lt;/doc&gt;&apos;
		XPath1 = &quot;doc/p&quot;
		XPath2 = &quot;doc/p[@v]&quot;
	Output PS:
		XPath1 = &quot;Hello, world!&quot;
		XPath2 = &quot;Hello, my world!&quot;
*/
	var thisFunctionName = &quot;XPath_Wrapper&quot;;
	var i = 0;
	var xPaths = null;
	var propName =&quot;&quot;;	
	try
	{
//TheApplication().GetService(&quot;KH Logs BS&quot;).PrintPsToLog(Ips, null);
		xPaths = new Array(Ips.GetPropertyCount());
		for (i = 0; i &lt; Ips.GetPropertyCount(); i++)
		{
			propName = i == 0 ? Ips.GetFirstProperty() : Ips.GetNextProperty();
			xPaths[i] = Ips.GetProperty(propName);
		}
		xPaths = XPath(Ips.GetValue(), xPaths);
		for (i = 0; i &lt; Ips.GetPropertyCount(); i++)
		{
			propName = i == 0 ? Ips.GetFirstProperty() : Ips.GetNextProperty();
			Ops.SetProperty(propName,  xPaths[i]);
		}
	}
	catch (e)
	{
		WriteToLog(thisFunctionName, e.message, true);
		throw (e);
	}
}"
			   SEQUENCE="6"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"﻿<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS=""
   NAME="Siebel Repository"
   UPDATED="01/01/2000 00:00:00"
   UPDATED_BY="SADMIN"
   CREATED="01/01/2001 00:00:00"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="EAI Business Services"
	   UI_FREEZE="N"
	   UPDATED="01/01/2000 00:00:00"
	   UPDATED_BY="SADMIN"
	   CREATED="01/01/2000 00:00:00"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VIF XML Utilities"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="01/01/2000 00:00:00"
		   UPDATED_BY="YUVALY1"
		   CREATED="01/01/2000 00:00:00"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetByElementName"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ElementName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IncomingXML"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultingXML"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Navigate"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="In"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Out"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ParseBuffer"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="YUVALY1"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="YUVALY1">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Buffer"
				   OPTIONAL="N"
				   STORAGE_TYPE="Value"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="YUVALY1"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="YUVALY1">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Row, for example"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ChieldName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="true / false. If true return information for debug"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IsDebugMode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Param1: 4; Param2: 150; Param3: 2"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Template"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="XML Hierarchy"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="Function return text of XML-node. Returned first node only if found more then one. IgorV. 26.02.12. Activated"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="XPath"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Input xml"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="XML"
				   OPTIONAL="N"
				   STORAGE_TYPE="Value"
				   TYPE="Input"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="xPath expression"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="xPath1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="xPath expression"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="xPath2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/01/2000 00:00:00"
				   UPDATED_BY="SADMIN"
				   CREATED="01/01/2000 00:00:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetXmlByElement"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetXmlByElement(ElementName,IncomingXml)
{
	var sXML,i;
	var xmlRecords = COMCreateObject(&quot;MSXML2.DOMDocument&quot;);
	var domXMLInput = COMCreateObject(&quot;MSXML2.DOMDocument&quot;);
	var domParent;
	
	sXML = &quot;&quot;;
	
	domXMLInput.LoadXML(IncomingXml);
	
	if(domXMLInput.getElementsByTagName(ElementName).Item(1) == null )
	{
		xmlRecords = domXMLInput.getElementsByTagName(ElementName).Item(0);
		sXML = xmlRecords.XML;
	}
	else
	{
		if(domXMLInput.getElementsByTagName(ElementName).Item(0).parentNode != null)
		{
			sXML = sXML + &quot;&lt;ListOf&quot; + ElementName + &quot;&gt;&quot;;
			for(i=0;domXMLInput.getElementsByTagName(ElementName).Item(i) != null; i++)
			{
				if( domXMLInput.getElementsByTagName(ElementName).Item(i).parentNode != null)
				{
					sXML = sXML + &quot;&lt;Single&quot; + ElementName + &quot;&gt;&quot;;
					sXML = sXML + &quot;&lt;TableName&gt;&quot; + domXMLInput.getElementsByTagName(ElementName).Item(i).parentNode.NodeName + &quot;&lt;/TableName&gt;&quot;;
					sXML = sXML + domXMLInput.getElementsByTagName(ElementName).Item(i).XML;
					sXML = sXML + &quot;&lt;Index&gt;&quot; + i+1 + &quot;&lt;/Index&gt;&quot;
					sXML = sXML + &quot;&lt;/Single&quot; + ElementName + &quot;&gt;&quot;;
				}				
			}
			sXML = sXML + &quot;&lt;/ListOf&quot; + ElementName + &quot;&gt;&quot;;
		}
	}
	
	//var xmlRecords = null;
	xmlRecords = null; // IgorV. 30.11.10 updated
	//var domXMLInput = null;
	domXMLInput = null; // IgorV. 30.11.10 updated
	
	return(sXML);
}"
			   SEQUENCE="2"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ParseBuffer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ParseBuffer(ips, ops)
{
/*
	Parsing string buffer to xml - PS
	input: 
		buffer - string buffer (123abcd)
		template - template for parsing in format 
			NameOfParameter1: LengthOfParameter1;NameOfParameter2: LengthOfParameter2
			(Number:3;string:4)
		rowName - name of PS, it pesentation row (OneRow)
		Name - name of output PS (Table).
		IsDebugMode - if true - debug info will be added in output PS
	output:
		ps, with name from input parameter Name.
	for data from example resut:
  PropertySet: Type: &apos;Table&apos; Value: &apos;&apos; PropertyCount: 0 ChildCount: 1
  CHILD
    PropertySet: Type: &apos;Row&apos; Value: &apos;&apos; PropertyCount: 1 ChildCount: 2
    RowNumber = 1
    CHILD
      PropertySet: Type: &apos;Number&apos; Value: &apos;123&apos; PropertyCount: 0 ChildCount: 0
      End PS
    CHILD
      PropertySet: Type: &apos;string&apos; Value: &apos;abcd&apos; PropertyCount: 0 ChildCount: 0
      End PS
    End PS
  End PS
  
	Xml presentation:
&lt;Table&gt;
	&lt;Row RowNumber=&quot;1&quot;&gt;
		&lt;Number&gt;123&lt;/Number&gt;
		&lt;string&gt;abcd&lt;/string&gt;
	&lt;/Row&gt;
&lt;/Table&gt;
		
*/
//	Template : Name:Symbols;
	
	var thisFunctionName = &quot;ParseBuffer&quot;; 
	var template = &quot;&quot;; // input param
	var pairs = null; // array type of val[0] - name of parameter from template, val[1] - length of substring
	var buffer = &quot;&quot;; // input param
	var tmpPs = TheApplication().NewPropertySet(); // Output ps
//	var psName = &quot;&quot;;
	var rowName = &quot;&quot;; 
	var isDebugMode = false; // if true - in ps add row number and content of row
	template = ips.GetProperty(&quot;Template&quot;);
//buffer = ips.GetProperty(&quot;Buffer&quot;);
	buffer = ips.GetValue();
	isDebugMode = ips.GetProperty(&quot;IsDebugMode&quot;) == &quot;true&quot;;
	rowName = ips.GetProperty(&quot;ChieldName&quot;);

//	WriteToLog(thisFunctionName, &quot;Buffer = &quot; + buffer + &quot;\nTemplate = &quot; + template, false) 
//	WriteToLog(thisFunctionName, &quot;Template = &quot; + template + &quot; Buffer:\n&quot; + buffer, false) 
	WriteToLog(thisFunctionName, &quot;Template = &quot; + template , false);
	pairs = template.split(/\s*;\s*/);
	for (var i = 0; i &lt; pairs.length; i++) 
	{
	    pairs[i] = pairs[i].split(/\s*:\s*/);
	    pairs[i][1] = ToInteger(pairs[i][1]); // len of value in buffer
	}
//----------------//----------------//----------------//----------------
	var startPosition = 0; // position in match
	var matches = buffer.split(&quot;\n&quot;); // array of strings
	var rowPs = TheApplication().NewPropertySet(); //parsed presentation for row from input buffer
	var valPs = TheApplication().NewPropertySet(); // presentation of value from input ps (chield of rowPs)
	var propName = &quot;&quot;;
	var propValue = &quot;&quot;;
	WriteToLog(thisFunctionName, &quot;Rows in buffer &quot; + matches.length, false) 
	for (var m = 0; m &lt; matches.length; m++)
	{
		if (matches[m] == &quot;&quot;) continue;
		rowPs.Reset();
		rowPs.SetType(rowName); //rowPs.SetValue(m + 1);
		rowPs.SetProperty(&quot;RowNumber&quot;, m + 1);
		if (isDebugMode) 
		{
			rowPs.SetProperty(&quot;Content&quot;, matches[m]);
			rowPs.SetProperty(&quot;RowNumber&quot;, m + 1);
		}
		startPosition = 0; 
		for (i = 0; i &lt; pairs.length; i++)
		{
//WriteToLog(thisFunctionName, &quot;startPosition = &quot; + startPosition, false) 
			propName = pairs[i][0];
			propValue = matches[m].substr(startPosition, pairs[i][1]);
			if (isDebugMode) 
			{
//				valPs.SetProperty(&quot;from&quot;, startPosition); 
//				valPs.SetProperty(&quot;len&quot;, pairs[i][1]);
				rowPs.SetProperty(&quot;Template&quot;, 
					rowPs.GetProperty(&quot;Template&quot;) + propName + &quot;: &quot; + startPosition + &quot;/&quot; + pairs[i][1] + &quot;; &quot;);
			}
			propValue = propValue.replace(/^\s*|\s*$/g,&quot;&quot;); //trim
			valPs.Reset();
			valPs.SetType(propName);
			valPs.SetValue(propValue);
			rowPs.AddChild(valPs.Copy());
			//startPosition += ToInteger(pairs[i][1]);
			startPosition += pairs[i][1];
		} 
		tmpPs.AddChild(rowPs.Copy());
	}
//	ops.AddChild(tmpPs.Copy());
/*	var o = TheApplication().NewPropertySet();
	o.SetType(ips.GetProperty(&quot;Name&quot;));
	o.AddChild(tmpPs);
	ops.AddChild(o);*/
//	tmpPs.SetType(ips.GetProperty(&quot;Name&quot;));
	tmpPs.SetType(&quot;XML Hierarchy&quot;);
	ops.AddChild(tmpPs);
//	TheApplication().GetService(&quot;Logs BS&quot;).PrintPsToLog(ops, null);
	pairs = null;
	tmpPs = null;
	matches = null;
	rowPs = null;
	valPs = null;
}"
			   SEQUENCE="3"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var iRet = ContinueOperation;
	switch(MethodName)
	{
		case &quot;GetByElementName&quot;:
		
			var sOut  = GetXmlByElement(Inputs.GetProperty(&quot;ElementName&quot;),Inputs.GetProperty(&quot;IncomingXML&quot;));
			
			Outputs.SetProperty(&quot;ResultingXML&quot;,sOut);
			
			iRet = CancelOperation;
			break;
		case &quot;Navigate&quot;:
			TheApplication().GoToView(&quot;Personal Service Request List View&quot;);
			Outputs.SetProperty(&quot;Out&quot;,&quot;LEAVING&quot;);
			iRet = CancelOperation;
			break;
		case &quot;ParseBuffer&quot;: //IgorV.
			ParseBuffer(Inputs, Outputs);
			iRet = CancelOperation;
			break;
		case &quot;XPath&quot;://IgorV. 29.01.12
//			TheApplication().GetService(&quot;Logs BS&quot;).PrintPsToLog(Inputs, null);
			XPath_Wrapper(Inputs, Outputs);
			iRet = CancelOperation;
			break;
	}	
	return (iRet);
}"
			   SEQUENCE="7"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="WriteToLog"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function WriteToLog(functionName, message, isError)
{
	//IgorV. 20.10.2010
	try
	{
		TheApplication().GetService(&quot;Logs BS&quot;).WriteLogRecord(&quot;BS&quot;, this.Name(), functionName,message, isError);
	}
	catch(e)
	{
		//nothing to do
	}
}"
			   SEQUENCE="4"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="XPath"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function XPath(xml, xPaths)
{
//TheApplication().RaiseErrorText(&quot;Function: &apos;&quot; + this.Name() + &quot;.XPath&apos; checked but not in use. For using this function remove this error message&quot;);
//IgorV. 26.02.12. Function activated
/*
	IgorV. 29.01.2012
	
	Function return text of XML-nodes. Returned first node only if found more then one.
	XML - sourse XML
	xPath - row or array of rows with xpath.
	If xPath one row - function return single row with text of node, if xPath is array - 
	return array of string
	Example:
	XPath(
		&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;doc&gt;&lt;p&gt;Hello, world!&lt;/p&gt;&lt;p v=&quot;Me&quot;&gt;Hello, my world!&lt;/p&gt;&lt;/doc&gt;&apos;,
		&quot;doc/p&quot;
		) = Hello, world!
	example for using with multiply xpath in function XPath_Wrapper
*/
	var thisFunctionName = &quot;XPath&quot;;
	var xmlDoc = null;
	var node = null;
	var res = null;
	try
	{
		//xmlDoc = COMCreateObject(&quot;Microsoft.XMLDOM&quot;);
    xmlDoc = COMCreateObject(&quot;Msxml2.DOMDocument.6.0&quot;);   // IgorV. 04.08.20. This object has better functionality
		xmlDoc.loadXML(xml);
		if (xmlDoc.parseError.errorCode != 0) // IgorV. 13.06.13
			TheApplication().RaiseErrorText(&quot;Error creation Xml object: (&quot; + xmlDoc.parseError.errorCode + &quot;) &quot; + xmlDoc.parseError.reason);
			//TheApplication().RaiseError(xmlDoc.parseError.errorCode, &quot;Error creation Xml object: &quot; , xmlDoc.parseError.reason);
		
		switch (typeof xPaths)
		{
			case &quot;string&quot;:
				res = &quot;&quot;;
				node = xmlDoc.selectSingleNode(xPaths);
				res = node != null ? node.text : &quot;&quot;;
				break;
			case &quot;function&quot;://typeof (new Array()) = &apos;function&apos;
			case &quot;object&quot;:
				res = new Array(xPaths.length);
//				WriteToLog(thisFunctionName, xml, false);
				for (var i = 0; i &lt; xPaths.length; i++)
				{
					node = xmlDoc.selectSingleNode(xPaths[i]);
					res[i] = ToString(node) == &quot;undefined&quot; || node == null  ? &quot;&quot; : node.text;
				}
				break;
			case default:
				TheApplication().RaiseErrorText(&quot;Unknown type of xPaths: &apos;&quot; + (typeof xPaths) + &quot;&apos;&quot;);
				break;
		}
		return res;
	}
	catch(e)
	{
		WriteToLog(thisFunctionName, e.message, true);
		throw e;
	}
	finally
	{
		xmlDoc = node = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="XPath_Wrapper"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function XPath_Wrapper(Ips, Ops)
{
/*
	IgorV. 29.01.12
	Function return text from XML node, it geted by XPath expression.
	Function referended for first node if founded more from one node. It mean (see example),
	by xpath doc/p found 2 nodes, but returned first node only.
	Ips.Value (property XML) - source xml document.
	Other properties xpath expressions.
	Example:
	Input PS
		XML = &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;doc&gt;&lt;p&gt;Hello, world!&lt;/p&gt;&lt;p v=&quot;Me&quot;&gt;Hello, my world!&lt;/p&gt;&lt;/doc&gt;&apos;
		XPath1 = &quot;doc/p&quot;
		XPath2 = &quot;doc/p[@v]&quot;
	Output PS:
		XPath1 = &quot;Hello, world!&quot;
		XPath2 = &quot;Hello, my world!&quot;
*/
	var thisFunctionName = &quot;XPath_Wrapper&quot;;
	var i = 0;
	var xPaths = null;
	var propName =&quot;&quot;;	
	try
	{
//TheApplication().GetService(&quot;Logs BS&quot;).PrintPsToLog(Ips, null);
		xPaths = new Array(Ips.GetPropertyCount());
		for (i = 0; i &lt; Ips.GetPropertyCount(); i++)
		{
			propName = i == 0 ? Ips.GetFirstProperty() : Ips.GetNextProperty();
			xPaths[i] = Ips.GetProperty(propName);
		}
		xPaths = XPath(Ips.GetValue(), xPaths);
		for (i = 0; i &lt; Ips.GetPropertyCount(); i++)
		{
			propName = i == 0 ? Ips.GetFirstProperty() : Ips.GetNextProperty();
			Ops.SetProperty(propName,  xPaths[i]);
		}
	}
	catch (e)
	{
		WriteToLog(thisFunctionName, e.message, true);
		throw (e);
	}
}"
			   SEQUENCE="6"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="a_log"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function a_log(str)
{
/*
 var fp = Clib.fopen(&quot;\\&quot; + &quot;\\STLDR010\\TEMP\\test_2.txt&quot;,&quot;at+&quot;);
      Clib.fputs(str, fp);
      Clib.fclose(fp);
*/
}"
			   SEQUENCE="1"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>


			   NAME="a_log"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function a_log(str)
{
/*
 var fp = Clib.fopen(&quot;\\&quot; + &quot;\\STLDR010\\TEMP\\test_2.txt&quot;,&quot;at+&quot;);
      Clib.fputs(str, fp);
      Clib.fclose(fp);
*/
}"
			   SEQUENCE="1"
			   UPDATED="01/01/2000 00:00:00"
			   UPDATED_BY="SADMIN"
			   CREATED="01/01/2000 00:00:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>
